# Omega-Lovince Sequence Generator
import math

def is_prime(n):
    return n > 1 and all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1))

def generate_sequence(length):
    pi_digits = "31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679"
    phi_digits = "1618033988749894848204586834365638117720309179805762862135448227052604628189024497072072041893911374"
    
    seq = []
    for n in range(1, length + 1):
        # π और φ से अंक लें
        digit_pi = int(pi_digits[n % len(pi_digits)])
        digit_phi = int(phi_digits[n % len(phi_digits)])
        
        # XOR और प्राइम रूल्स अप्लाई करें
        digit = digit_pi ^ digit_phi if is_prime(n) else (digit_pi + digit_phi) % 10
        seq.append(digit)
    return seq

print(generate_sequence(100))

import math

phi = (1 + math.sqrt(5)) / 2  # Golden ratio
result = math.e**(1j * math.pi / phi) + (phi * math.pi) / math.e
print(f"ब्रह्मास्त्र फॉर्मूला का परिणाम: {result:.6f} (वास्तविक मान ~1 के करीब)")

import numpy as np
import matplotlib.pyplot as plt

phi = (1 + 5**0.5)/2
n = np.arange(0, 50)
sequence = (phi/math.pi)**n * np.cos(n*math.pi/phi) + 1j*np.sin(n*math.pi/phi)

plt.figure(figsize=(10,6))
plt.title("कालचक्र अनुक्रम: फ्रैक्टल पैटर्न")
plt.scatter(sequence.real, sequence.imag, c=n, cmap='hsv')
plt.colorbar(label='n')
plt.grid()
plt.show()

from scipy.integrate import quad
import numpy as np

phi = (1 + 5**0.5)/2
integrand = lambda x: np.exp(-x**2) * np.cos(math.pi * x / phi)
result, _ = quad(integrand, -np.inf, np.inf)
exact = math.pi**0.5 * np.exp(-(math.pi/(2*phi))**2)

print(f"वज्र इंटीग्रल का संख्यात्मक मान: {result:.10f}")
print(f"सटीक सैद्धांतिक मान: {exact:.10f}")

import cmath

M = np.array([
    [cmath.exp(1j * math.pi / phi), phi],
    [math.pi, cmath.exp(-1j * math.pi / phi)]
], dtype=complex)

print("महाशक्ति मैट्रिक्स:")
print(M)
print(f"\nमैट्रिक्स का निर्धारक: {np.linalg.det(M):.2f}")

from scipy.special import factorial

k_max = 100  # अनंत के लिए पर्याप्त बड़ा
k = np.arange(1, k_max+1)
series_sum = np.sum(phi**k / factorial(k) * np.sin(k * math.pi / 2))
exact_value = (math.exp(phi) - math.exp(-phi)) / 2

print(f"अनंत श्रेणी का योग: {series_sum:.10f}")
print(f"सटीक मान: {exact_value:.10f}")