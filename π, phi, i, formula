import math

phi = (1 + math.sqrt(5)) / 2  # Golden ratio
result = math.e**(1j * math.pi / phi) + (phi * math.pi) / math.e
print(f"Brahmastra Formula Result: {result:.6f} (should be close to 1)")

import numpy as np
import matplotlib.pyplot as plt

phi = (1 + 5**0.5)/2
n = np.arange(0, 50)
sequence = (phi/math.pi)**n * np.cos(n*math.pi/phi) + 1j*np.sin(n*math.pi/phi)

plt.figure(figsize=(10,6))
plt.title("Time-Wheel Sequence: Fractal Pattern")
plt.scatter(sequence.real, sequence.imag, c=n, cmap='hsv')
plt.colorbar(label='n')
plt.grid()
plt.show()

from scipy.integrate import quad
import numpy as np

phi = (1 + 5**0.5)/2
integrand = lambda x: np.exp(-x**2) * np.cos(math.pi * x / phi)
result, _ = quad(integrand, -np.inf, np.inf)
exact = math.pi**0.5 * np.exp(-(math.pi/(2*phi))**2)

print(f"Numerical Integral Value: {result:.10f}")
print(f"Theoretical Exact Value: {exact:.10f}")

import cmath

M = np.array([
    [cmath.exp(1j * math.pi / phi), phi],
    [math.pi, cmath.exp(-1j * math.pi / phi)]
], dtype=complex)

print("Superpower Matrix:")
print(M)
print(f"\nMatrix Determinant: {np.linalg.det(M):.2f}")

from scipy.special import factorial

k_max = 100  # Large enough for approximation
k = np.arange(1, k_max+1)
series_sum = np.sum(phi**k / factorial(k) * np.sin(k * math.pi / 2))
exact_value = (math.exp(phi) - math.exp(-phi)) / 2

print(f"Infinite Series Sum: {series_sum:.10f}")
print(f"Exact Value: {exact_value:.10f}")